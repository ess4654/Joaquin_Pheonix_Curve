import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 2;
float FR = 27;
float SampleRate = 27;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color hair = color(113, 103, 79);
color skin = color(228, 186, 159);
color brown = color(65, 34, 15);
color blue = color(83, 107, 110);
color lips = color(136, 58, 50);
color eyes = color(59, 84, 95);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Rock and Roll.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.012;
  
  if(T >= 266.805) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 88 * PI;
  }
  if(T >= 263.934 && T < 266.805) { //SHIRT
    strokes.add(3);
    lineColor.add(blue);
    return T;
  }
  if(T >= 254.435 && T < 263.934) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 263.934;
  }
  if(T >= 251.329 && T < 254.435) { //SHIRT
    strokes.add(3);
    if(T < 253.689)
      lineColor.add(blue);
    else
      lineColor.add(white);
      
    if(T >= 253.639 && T < 253.699)
      T = 253.699;
    return T - 0.01;
  }
  if(T >= 241.869 && T < 251.329) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 251.329;
  }
  if(T >= 238.763 && T < 241.869) { //LEFT EAR
    strokes.add(3);
    lineColor.add(skin);
    return T - 0.004;
  }
  if(T >= 229.464 && T < 238.763) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 238.763;
  }
  if(T >= 226.196 && T < 229.464) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.011;
  }
  if(T >= 216.907 && T < 226.196) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 226.196;
  }
  if(T >= 213.629 && T < 216.907) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 204.560 && T < 213.629) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 213.629;
  }
  if(T >= 201.062 && T < 204.560) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.011;
  }
  if(T >= 192.261 && T < 201.062) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.062;
  }
  if(T >= 188.506 && T < 192.261) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 179.823 && T < 188.506) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.506;
  }
  if(T >= 175.950 && T < 179.823) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.011;
  }
  if(T >= 167.697 && T < 175.950) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 175.950;
  }
  if(T >= 163.372 && T < 167.697) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.011;
  }
  if(T >= 154.452 && T < 163.372) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 163.372;
  }
  if(T >= 150.804 && T < 154.452) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.011;
  }
  if(T >= 142.481 && T < 150.804) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 150.804;
  }
  if(T >= 138.236 && T < 142.481) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 128.954 && T < 138.236) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 138.236;
  }
  if(T >= 125.667 && T < 128.954) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 116.725 && T < 125.667) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 125.667;
  }
  if(T >= 113.108 && T < 116.725) { //FRONT HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 103.734 && T < 113.108) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.108;
  }
  if(T >= 100.542 && T < 103.734) { //HEAD
    strokes.add(4);
    lineColor.add(skin);
    return T - 0.006;
  }
  if(T >= 91.181 && T < 100.542) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.542;
  }
  if(T >= 88.001 && T < 91.181) { //CHIN
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 78.532 && T < 88.001) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 88.001;
  }
  if(T >= 75.400 && T < 78.532) { //LIPS
    strokes.add(2);
    lineColor.add(lips);
    return T - 0.004;
  }
  if(T >= 66.385 && T < 75.400) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.400;
  }
  if(T >= 62.845 && T < 66.385) { //NOSE 2
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 53.588 && T < 62.845) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.845;
  }
  if(T >= 50.276 && T < 53.588) { //NOSE
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 43.995 && T < 50.276) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 50.276;
  }
  if(T >= 37.726 && T < 43.995) { //RIGHT EYE
    strokes.add(2);
    if(T < 39.770)
      lineColor.add(eyes);
    else
      lineColor.add(skin);
    return T;
  }
  if(T >= 31.486 && T < 37.726) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.726;
  }
  if(T >= 25.125 && T < 31.486) { //LEFT EYE
    strokes.add(2);
    if(T < 25.994)
      lineColor.add(skin);
    else if (T < 27.662)
      lineColor.add(blue);
    else
      lineColor.add(skin);
    return T;
  }
  if(T >= 18.835 && T < 25.125) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.125;
  }
  if(T >= 12.572 && T < 18.835) { //RIGHT EYEBROW
    strokes.add(2);
    lineColor.add(brown);
    return T;
  }
  if(T >= 6.268 && T < 12.572) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.572;
  }
  else { //LEFT EYEBROW
    strokes.add(2);
    lineColor.add(brown);
  }
  
  return T;
}

void draw()
{ 
  if(frameCount < (FR/0.7)) return;
  if(t <= 88 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.00266;
  }
  
  translate(width/2 - 40, height/2 - 100);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-1.0/76*sin(4.0/3 - 2*t) + 270.0/11*sin(t + 11.0/7) + 23.0/8*sin(3*t + 11.0/7) + 19.0/18*sin(5*t + 11.0/7) + 239.0/2)*theta(87*PI -t)*theta(t - 83*PI) + (-1.0/5*sin(7.0/6 - 51*t) - 2.0/9*sin(13.0/11 - 50*t) - 1.0/8*sin(17.0/13 - 47*t) - 1.0/3*sin(9.0/8 - 46*t) - 1.0/10*sin(8.0/15 - 43*t) - 3.0/5*sin(7.0/5 - 42*t) - 1.0/7*sin(17.0/11 - 40*t) - 1.0/30*sin(34.0/23 - 39*t) - 3.0/7*sin(23.0/17 - 34*t) - 5.0/9*sin(13.0/9 - 33*t) - 5.0/6*sin(7.0/5 - 30*t) - 2.0/9*sin(11.0/10 - 27*t) - 7.0/12*sin(7.0/5 - 25*t) - 2.0/3*sin(34.0/23 - 24*t) - 5.0/6*sin(3.0/2 - 22*t) - 3.0/10*sin(16.0/13 - 21*t) - 18.0/7*sin(17.0/11 - 15*t) - 3.0/2*sin(10.0/7 - 8*t) - 125.0/7*sin(14.0/9 - 4*t) - 514.0/13*sin(11.0/7 - 2*t) - 516.0/7*sin(11.0/7 -t) + 237.0/8*sin(3*t + 19.0/12) + 47.0/6*sin(5*t + 11.0/7) + 9.0/4*sin(6*t + 17.0/10) + 91.0/17*sin(7*t + 19.0/12) + 195.0/11*sin(9*t + 8.0/5) + 38.0/5*sin(10*t + 8.0/5) + 5.0/4*sin(11*t + 10.0/7) + 41.0/12*sin(12*t + 21.0/13) + 7.0/3*sin(13*t + 5.0/3) + 8.0/7*sin(14*t + 79.0/17) + 36.0/35*sin(16*t + 23.0/5) + 13.0/8*sin(17*t + 13.0/8) + 2.0/3*sin(18*t + 16.0/11) + 26.0/9*sin(19*t + 19.0/12) + 7.0/4*sin(20*t + 23.0/14) + 13.0/25*sin(23*t + 16.0/9) + 7.0/10*sin(26*t + 5.0/3) + 3.0/11*sin(28*t + 5.0/3) + 7.0/13*sin(29*t + 5.0/3) + 1.0/5*sin(31*t + 5.0/3) + 3.0/8*sin(32*t + 23.0/12) + 10.0/11*sin(35*t + 17.0/10) + 11.0/8*sin(36*t + 18.0/11) + 5.0/14*sin(37*t + 11.0/8) + 3.0/7*sin(38*t + 18.0/11) + 5.0/9*sin(41*t + 11.0/6) + 16.0/17*sin(44*t + 7.0/4) + 6.0/13*sin(45*t + 17.0/10) + 3.0/8*sin(48*t + 17.0/9) + 1.0/12*sin(49*t + 51.0/11) + 3.0/7*sin(52*t + 16.0/9) + 1.0/2*sin(53*t + 12.0/7) + 70.0/9)*theta(83*PI -t)*theta(t - 79*PI) + (-1.0/11*sin(13.0/9 - 34*t) - 1.0/45*sin(4.0/3 - 33*t) - 1.0/34*sin(19.0/13 - 31*t) - 1.0/21*sin(4.0/3 - 30*t) - 1.0/8*sin(26.0/17 - 29*t) - 3.0/8*sin(3.0/2 - 25*t) - 3.0/8*sin(19.0/13 - 24*t) - 3.0/14*sin(16.0/11 - 20*t) - 3.0/7*sin(29.0/19 - 19*t) - 1.0/8*sin(13.0/9 - 14*t) - 9.0/8*sin(20.0/13 - 11*t) - 11.0/9*sin(20.0/13 - 10*t) - 17.0/7*sin(11.0/7 - 7*t) - 48.0/19*sin(11.0/7 - 5*t) - 83.0/21*sin(14.0/9 - 4*t) - 19.0/4*sin(14.0/9 - 3*t) - 34.0/7*sin(11.0/7 - 2*t) + 8.0/17*sin(t + 11.0/7) + 131.0/22*sin(6*t + 19.0/12) + 20.0/9*sin(8*t + 19.0/12) + 1.0/50*sin(9*t + 21.0/8) + 1.0/12*sin(12*t + 3.0/2) + 5.0/11*sin(13*t + 18.0/11) + 1.0/86*sin(15*t + 9.0/5) + 1.0/32*sin(16*t + 14.0/9) + 1.0/11*sin(17*t + 14.0/3) + 1.0/5*sin(18*t + 11.0/7) + 1.0/8*sin(21*t + 5.0/3) + 5.0/8*sin(22*t + 23.0/14) + 1.0/7*sin(23*t + 22.0/13) + 1.0/8*sin(26*t + 13.0/8) + 2.0/9*sin(27*t + 17.0/10) + 2.0/7*sin(28*t + 18.0/11) + 1.0/48*sin(32*t + 7.0/4) + 1.0/47*sin(35*t + 9.0/5) + 1.0/8*sin(36*t + 27.0/16) - 717.0/14)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/11*sin(14.0/13 - 73*t) - 1.0/8*sin(10.0/7 - 69*t) - 2.0/11*sin(9.0/7 - 67*t) - 2.0/9*sin(8.0/7 - 65*t) - 2.0/11*sin(4.0/9 - 64*t) - 1.0/7*sin(10.0/7 - 63*t) - 4.0/9*sin(7.0/6 - 61*t) - 4.0/9*sin(5.0/4 - 53*t) - 4.0/7*sin(11.0/8 - 44*t) - 21.0/13*sin(5.0/4 - 39*t) - 3.0/11*sin(5.0/6 - 32*t) - 14.0/15*sin(9.0/7 - 31*t) - 4.0/9*sin(9.0/8 - 30*t) - 14.0/15*sin(19.0/15 - 29*t) - 28.0/29*sin(16.0/13 - 28*t) - 7.0/6*sin(5.0/4 - 27*t) - 3.0/7*sin(28.0/19 - 26*t) - 13.0/11*sin(10.0/7 - 24*t) - 6.0/11*sin(26.0/17 - 21*t) - 4.0/9*sin(12.0/11 - 20*t) - 28.0/13*sin(7.0/5 - 19*t) -sin(14.0/11 - 18*t) - 19.0/11*sin(11.0/8 - 17*t) - 4.0/3*sin(7.0/5 - 16*t) - 9.0/11*sin(16.0/11 - 9*t) - 5.0/13*sin(7.0/5 - 8*t) - 3.0/10*sin(16.0/11 - 7*t) - 5.0/12*sin(10.0/7 - 6*t) - 201.0/40*sin(14.0/9 -t) + 49.0/11*sin(2*t + 19.0/12) + 68.0/15*sin(3*t + 8.0/5) + 16.0/7*sin(4*t + 21.0/13) + 1.0/7*sin(5*t + 3.0/2) + 2.0/7*sin(10*t + 23.0/14) + 86.0/85*sin(11*t + 17.0/10) + 13.0/14*sin(12*t + 19.0/11) + 5.0/11*sin(13*t + 12.0/7) + 2.0/7*sin(14*t + 20.0/11) + 4.0/7*sin(15*t + 12.0/7) + 4.0/7*sin(22*t + 17.0/9) + 2.0/5*sin(23*t + 26.0/15) + 3.0/5*sin(25*t + 7.0/4) + 1.0/8*sin(33*t + 13.0/4) + 11.0/12*sin(34*t + 15.0/8) + 3.0/11*sin(35*t + 7.0/3) + 3.0/7*sin(36*t + 9.0/5) + 7.0/12*sin(37*t + 9.0/4) + 1.0/3*sin(38*t + 13.0/10) + 6.0/7*sin(40*t + 7.0/4) + 1.0/5*sin(41*t + 18.0/7) + 1.0/9*sin(42*t + 19.0/9) + 6.0/11*sin(43*t + 7.0/4) + 3.0/7*sin(45*t + 17.0/11) + 2.0/11*sin(46*t + 29.0/8) + 9.0/11*sin(47*t + 2) + 1.0/3*sin(48*t + 19.0/8) + 1.0/8*sin(49*t + 16.0/9) + 1.0/15*sin(51*t + 85.0/19) + 1.0/5*sin(52*t + 11.0/7) + 1.0/5*sin(54*t + 11.0/10) + 3.0/14*sin(55*t + 55.0/12) + 6.0/19*sin(56*t + 23.0/13) + 1.0/5*sin(57*t + 14.0/3) + 4.0/11*sin(58*t + 15.0/8) + 3.0/10*sin(59*t + 17.0/6) + 2.0/7*sin(60*t + 7.0/4) + 1.0/6*sin(62*t + 11.0/7) + 1.0/7*sin(66*t + 23.0/13) + 1.0/12*sin(68*t + 8.0/7) + 1.0/9*sin(70*t + 24.0/13) + 1.0/13*sin(71*t + 53.0/16) + 1.0/24*sin(72*t + 5.0/9) - 703.0/12)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/45*sin(4.0/9 - 46*t) - 3.0/5*sin(17.0/11 - 38*t) - 4.0/7*sin(11.0/7 - 33*t) - 4.0/15*sin(26.0/17 - 31*t) - 8.0/11*sin(11.0/7 - 29*t) - 71.0/70*sin(14.0/9 - 27*t) + 19.0/4*sin(t + 11.0/7) + 98.0/97*sin(2*t + 33.0/7) + 1.0/14*sin(3*t + 17.0/11) + 5.0/8*sin(4*t + 11.0/7) + 2.0/3*sin(5*t + 8.0/5) + 8.0/13*sin(6*t + 8.0/5) + 6.0/13*sin(7*t + 8.0/5) + 3.0/7*sin(8*t + 11.0/7) + 1.0/14*sin(9*t + 34.0/23) + 2.0/7*sin(10*t + 14.0/9) + 1.0/10*sin(11*t + 23.0/5) + 1.0/9*sin(12*t + 7.0/4) + 3.0/8*sin(13*t + 14.0/3) + 5.0/12*sin(14*t + 14.0/9) + 6.0/7*sin(15*t + 8.0/5) + 12.0/11*sin(16*t + 14.0/9) + 1.0/28*sin(17*t + 14.0/3) + 11.0/6*sin(18*t + 33.0/7) + 4.0/7*sin(19*t + 37.0/8) + 11.0/5*sin(20*t + 14.0/9) + 13.0/11*sin(21*t + 19.0/12) + 12.0/13*sin(22*t + 14.0/3) + 1.0/12*sin(23*t + 4.0/3) + 3.0/13*sin(24*t + 19.0/12) + 5.0/6*sin(25*t + 33.0/7) + 9.0/14*sin(26*t + 11.0/7) + 14.0/11*sin(28*t + 8.0/5) + 15.0/11*sin(30*t + 8.0/5) + 7.0/11*sin(32*t + 18.0/11) + 1.0/26*sin(34*t + 37.0/9) + 1.0/7*sin(35*t + 14.0/9) + 3.0/5*sin(36*t + 11.0/7) + 1.0/18*sin(37*t + 6.0/5) + 3.0/4*sin(39*t + 75.0/16) + 1.0/6*sin(40*t + 10.0/7) + 1.0/2*sin(41*t + 14.0/9) + 9.0/19*sin(42*t + 75.0/16) + 1.0/19*sin(43*t + 13.0/7) + 3.0/5*sin(44*t + 3.0/2) + 5.0/14*sin(45*t + 41.0/9) + 1.0/7*sin(47*t + 21.0/13) + 3.0/11*sin(48*t + 47.0/10) + 3.0/10*sin(49*t + 8.0/5) + 1.0/20*sin(50*t + 19.0/11) + 2.0/5*sin(51*t + 13.0/8) + 2.0/7*sin(52*t + 18.0/11) + 2.0/9*sin(53*t + 37.0/8) + 1.0/7*sin(54*t + 5.0/3) + 5.0/16*sin(55*t + 33.0/7) + 9.0/17*sin(56*t + 19.0/12) - 329.0/8)*theta(71*PI -t)*theta(t - 67*PI) + (-1.0/8*sin(16.0/11 - 38*t) - 13.0/19*sin(14.0/9 - 36*t) - 1.0/11*sin(8.0/7 - 34*t) - 1.0/2*sin(17.0/11 - 28*t) - 14.0/11*sin(14.0/9 - 18*t) + 29.0/12*sin(t + 11.0/7) + 2.0/3*sin(2*t + 8.0/5) + 7.0/9*sin(3*t + 11.0/7) + 10.0/21*sin(4*t + 11.0/7) + 53.0/26*sin(5*t + 11.0/7) + 17.0/13*sin(6*t + 14.0/9) + 25.0/12*sin(7*t + 11.0/7) + 5.0/13*sin(8*t + 13.0/9) + 13.0/5*sin(9*t + 33.0/7) + 39.0/11*sin(10*t + 47.0/10) + 1.0/18*sin(11*t + 77.0/17) + 6.0/13*sin(12*t + 8.0/5) + 17.0/13*sin(13*t + 47.0/10) + 9.0/11*sin(14*t + 29.0/19) + 13.0/7*sin(15*t + 14.0/9) + 9.0/8*sin(16*t + 11.0/7) + 7.0/5*sin(17*t + 14.0/9) + 19.0/8*sin(19*t + 61.0/13) + 6.0/7*sin(20*t + 65.0/14) + 7.0/8*sin(21*t + 26.0/17) + 2.0/5*sin(22*t + 32.0/7) + 12.0/7*sin(23*t + 61.0/13) + 7.0/8*sin(24*t + 3.0/2) + 9.0/8*sin(25*t + 14.0/9) + 3.0/10*sin(26*t + 51.0/11) + 16.0/15*sin(27*t + 17.0/11) + 9.0/14*sin(29*t + 79.0/17) + 9.0/14*sin(30*t + 17.0/11) + 1.0/7*sin(31*t + 10.0/7) + 1.0/56*sin(32*t + 16.0/5) + 4.0/11*sin(33*t + 11.0/7) + 3.0/4*sin(35*t + 21.0/13) + 4.0/7*sin(37*t + 11.0/7) + 2.0/13*sin(39*t + 75.0/16) + 1.0/6*sin(40*t + 11.0/7) + 86)*theta(67*PI -t)*theta(t - 63*PI) + (-1.0/48*sin(13.0/11 - 43*t) - 9.0/13*sin(26.0/17 - 34*t) - 7.0/3*sin(20.0/13 - 29*t) - 87.0/43*sin(11.0/7 - 2*t) + 123.0/16*sin(t + 11.0/7) + 14.0/5*sin(3*t + 19.0/12) + 29.0/8*sin(4*t + 47.0/10) + 8.0/11*sin(5*t + 11.0/7) + 11.0/8*sin(6*t + 47.0/10) + 8.0/7*sin(7*t + 11.0/7) + 16.0/17*sin(8*t + 14.0/3) + 6.0/13*sin(9*t + 65.0/14) + 23.0/17*sin(10*t + 75.0/16) + 11.0/10*sin(11*t + 14.0/3) + 4.0/5*sin(12*t + 3.0/2) + 8.0/11*sin(13*t + 35.0/23) + 37.0/16*sin(14*t + 29.0/19) + 23.0/9*sin(15*t + 3.0/2) + 39.0/8*sin(16*t + 29.0/19) + 46.0/9*sin(17*t + 16.0/11) + 47.0/10*sin(18*t + 28.0/19) + 111.0/55*sin(19*t + 23.0/5) + 58.0/11*sin(20*t + 23.0/5) + 10.0/9*sin(21*t + 10.0/7) + 18.0/5*sin(22*t + 17.0/12) + 3.0/10*sin(23*t + 21.0/5) + 19.0/12*sin(24*t + 65.0/14) + 25.0/8*sin(25*t + 3.0/2) + 21.0/22*sin(26*t + 51.0/11) + 20.0/13*sin(27*t + 37.0/8) + 17.0/6*sin(28*t + 17.0/11) + 14.0/9*sin(30*t + 13.0/8) + 9.0/11*sin(31*t + 89.0/19) + 13.0/11*sin(32*t + 60.0/13) + 3.0/13*sin(33*t + 43.0/21) + 1.0/3*sin(35*t + 17.0/11) + 1.0/13*sin(36*t + 4.0/3) + 1.0/4*sin(37*t + 49.0/11) + 1.0/21*sin(38*t + 18.0/11) + 1.0/11*sin(39*t + 9.0/10) + 1.0/8*sin(40*t + 37.0/9) + 5.0/16*sin(41*t + 14.0/3) + 1.0/52*sin(42*t + 36.0/11) + 3.0/10*sin(44*t + 11.0/8) + 1.0/10*sin(45*t + 9.0/2) + 2.0/13*sin(46*t + 13.0/9) + 2.0/7*sin(47*t + 4.0/3) + 6.0/17*sin(48*t + 21.0/16) + 744.0/13)*theta(63*PI -t)*theta(t - 59*PI) + (-10.0/7*sin(14.0/11 - 11*t) + 224.0/15*sin(t + 11.0/7) + 246.0/11*sin(2*t + 14.0/9) + 103.0/11*sin(3*t + 23.0/15) + 69.0/13*sin(4*t + 29.0/19) + 31.0/7*sin(5*t + 14.0/3) + 43.0/9*sin(6*t + 37.0/8) + 59.0/29*sin(7*t + 7.0/5) + 22.0/15*sin(8*t + 11.0/7) + 18.0/11*sin(9*t + 10.0/7) + 52.0/9*sin(10*t + 29.0/19) + 30.0/7*sin(12*t + 61.0/14) + 395.0/16*sin(13*t + 37.0/8) + 374.0/15*sin(14*t + 22.0/15) + 27.0/5*sin(15*t + 16.0/13) + 9.0/10*sin(16*t + 39.0/20) + 3.0/4*sin(17*t + 9.0/8) + 15.0/7*sin(18*t + 95.0/21) + 40.0/17*sin(19*t + 41.0/9) + 30.0/11*sin(20*t + 57.0/13) + 8.0/3*sin(21*t + 50.0/11) + 14.0/11*sin(22*t + 40.0/9) + 5.0/4*sin(23*t + 11.0/8) + 32.0/9*sin(24*t + 13.0/10) + 53.0/10*sin(25*t + 9.0/7) + 49.0/11*sin(26*t + 17.0/13) + 12.0/7*sin(27*t + 59.0/13) + 8.0/5*sin(28*t + 7.0/5) + 3.0/8*sin(29*t + 49.0/11) + 20.0/11*sin(30*t + 13.0/3) + 19.0/11*sin(31*t + 22.0/5) + 19.0/10*sin(32*t + 61.0/14) + 8.0/5*sin(33*t + 48.0/11) + 17.0/11*sin(34*t + 43.0/10) + 12.0/7*sin(35*t + 57.0/13) + 43.0/21*sin(36*t + 47.0/11) + 31.0/14*sin(37*t + 13.0/3) + 3.0/2*sin(38*t + 46.0/11) + 3.0/4*sin(39*t + 9.0/2) + 23.0/22*sin(40*t + 15.0/11) + 81.0/41*sin(41*t + 35.0/8) + 1.0/5*sin(42*t + 13.0/4) + 7.0/10*sin(43*t + 9.0/8) + 1.0/49*sin(44*t + 4.0/7) + 1.0/6*sin(45*t + 18.0/11) + 1.0/12*sin(46*t + 23.0/6) + 1.0/3*sin(47*t + 40.0/9) + 1.0/11*sin(48*t + 11.0/8) + 1.0/33*sin(49*t + 21.0/22) + 2.0/9*sin(50*t + 29.0/7) - 200.0/13)*theta(59*PI -t)*theta(t - 55*PI) + (-1.0/7*sin(26.0/27 - 42*t) - 1.0/6*sin(7.0/8 - 40*t) - 9.0/10*sin(13.0/9 - 37*t) - 5.0/11*sin(7.0/5 - 34*t) - 6.0/7*sin(13.0/9 - 33*t) - 11.0/12*sin(11.0/8 - 26*t) - 41.0/21*sin(11.0/7 - 23*t) - 11.0/6*sin(22.0/15 - 19*t) - 121.0/13*sin(3.0/2 - 15*t) - 99.0/14*sin(23.0/15 - 13*t) - 15.0/2*sin(10.0/7 - 12*t) - 7.0/11*sin(6.0/5 - 6*t) - 29.0/15*sin(17.0/11 - 5*t) - 1.0/9*sin(9.0/7 - 4*t) - 16.0/11*sin(11.0/7 - 3*t) - 113.0/16*sin(14.0/9 -t) + 32.0/7*sin(2*t + 19.0/12) + 24.0/11*sin(7*t + 33.0/7) + 6.0/7*sin(8*t + 9.0/7) + 76.0/13*sin(9*t + 7.0/5) + 166.0/7*sin(10*t + 14.0/9) + 143.0/5*sin(11*t + 11.0/7) + 130.0/11*sin(14*t + 21.0/13) + 55.0/8*sin(16*t + 17.0/11) + 63.0/13*sin(17*t + 33.0/7) + 28.0/9*sin(18*t + 19.0/12) + 58.0/19*sin(20*t + 17.0/11) + 21.0/11*sin(21*t + 19.0/12) + 7.0/8*sin(22*t + 3.0/2) + 5.0/8*sin(24*t + 18.0/11) + 2.0/3*sin(25*t + 11.0/7) + 2.0/3*sin(27*t + 8.0/5) + 12.0/23*sin(28*t + 14.0/3) + 1.0/3*sin(29*t + 11.0/10) + 15.0/14*sin(30*t + 7.0/5) + 6.0/5*sin(31*t + 3.0/2) + 39.0/38*sin(32*t + 14.0/9) + 2.0/3*sin(35*t + 8.0/5) + 1.0/3*sin(36*t + 7.0/4) + 8.0/15*sin(38*t + 5.0/3) + 1.0/31*sin(39*t + 40.0/13) + 8.0/11*sin(41*t + 18.0/11) - 23.0/10)*theta(55*PI -t)*theta(t - 51*PI) + (-3.0/4*sin(20.0/13 - 39*t) - 3.0/4*sin(16.0/13 - 37*t) + 210.0/19*sin(t + 47.0/10) + 65.0/4*sin(2*t + 14.0/9) + 47.0/5*sin(3*t + 26.0/17) + 114.0/13*sin(4*t + 20.0/13) + 25.0/14*sin(5*t + 37.0/25) + 97.0/11*sin(6*t + 3.0/2) + 160.0/23*sin(7*t + 3.0/2) + 35.0/11*sin(8*t + 3.0/2) + 81.0/16*sin(9*t + 7.0/5) + 97.0/16*sin(10*t + 13.0/9) + 67.0/6*sin(11*t + 50.0/11) + 255.0/13*sin(12*t + 32.0/7) + 41.0/8*sin(13*t + 19.0/13) + 11.0/8*sin(14*t + 8.0/7) + 30.0/13*sin(15*t + 23.0/5) + 34.0/7*sin(16*t + 19.0/13) + 42.0/11*sin(17*t + 23.0/5) + 22.0/9*sin(18*t + 13.0/9) + 3.0/10*sin(19*t + 1) + 13.0/14*sin(20*t + 41.0/9) + 7.0/9*sin(21*t + 12.0/7) + 7.0/6*sin(22*t + 65.0/14) + 17.0/5*sin(23*t + 7.0/5) + 4.0/3*sin(24*t + 50.0/11) + 12.0/7*sin(25*t + 7.0/5) + 14.0/11*sin(26*t + 8.0/7) + 11.0/8*sin(27*t + 4.0/3) + 2.0/5*sin(28*t + 43.0/10) + 5.0/3*sin(29*t + 9.0/7) + 15.0/11*sin(30*t + 11.0/9) + 13.0/25*sin(31*t + 14.0/15) + 35.0/17*sin(32*t + 9.0/7) + 4.0/7*sin(33*t + 3.0/8) + 10.0/13*sin(34*t + 15.0/8) + 31.0/9*sin(35*t + 22.0/5) + 11.0/9*sin(36*t + 8.0/5) + 4.0/3*sin(38*t + 4.0/3) + 13.0/25*sin(40*t + 35.0/17) + 8.0/7*sin(41*t + 32.0/7) + 8.0/7*sin(42*t + 11.0/8) + 41.0/8)*theta(51*PI -t)*theta(t - 47*PI) + (-2.0/3*sin(15.0/13 - 45*t) - 15.0/29*sin(5.0/4 - 44*t) - 4.0/7*sin(15.0/11 - 39*t) - 19.0/13*sin(31.0/21 - 35*t) - 10.0/7*sin(26.0/17 - 33*t) - 89.0/88*sin(34.0/23 - 28*t) - 7.0/6*sin(26.0/17 - 26*t) - 1.0/5*sin(16.0/11 - 25*t) - 17.0/11*sin(10.0/7 - 23*t) - 8.0/9*sin(10.0/7 - 21*t) - 27.0/13*sin(25.0/17 - 20*t) - 21.0/11*sin(11.0/8 - 18*t) - 18.0/7*sin(16.0/11 - 14*t) - 17.0/7*sin(7.0/5 - 13*t) - 1.0/7*sin(9.0/7 - 9*t) - 9.0/10*sin(23.0/15 - 7*t) - 3*sin(14.0/9 - 3*t) + 11.0/16*sin(t + 65.0/14) + 1.0/6*sin(2*t + 47.0/10) + 3.0/10*sin(4*t + 16.0/11) + 3.0/11*sin(5*t + 32.0/7) + 15.0/7*sin(6*t + 13.0/8) + 5.0/14*sin(8*t + 11.0/9) + 11.0/9*sin(10*t + 13.0/8) + 7.0/10*sin(11*t + 19.0/11) + 3.0/4*sin(12*t + 17.0/12) + 100.0/13*sin(15*t + 5.0/3) + 187.0/14*sin(16*t + 5.0/3) + 5.0/4*sin(17*t + 12.0/7) + 27.0/7*sin(19*t + 21.0/13) + 11.0/8*sin(22*t + 8.0/5) + 8.0/9*sin(24*t + 11.0/7) + 15.0/11*sin(27*t + 23.0/14) + 2.0/3*sin(29*t + 12.0/7) + 1.0/20*sin(30*t + 14.0/9) + 1.0/5*sin(31*t + 29.0/7) + 13.0/8*sin(32*t + 12.0/7) + 23.0/15*sin(34*t + 8.0/5) + 7.0/5*sin(36*t + 13.0/8) + 6.0/7*sin(37*t + 61.0/13) + 10.0/11*sin(38*t + 13.0/8) + 1.0/5*sin(40*t + 10.0/9) + 1.0/10*sin(41*t + 7.0/4) + 1.0/4*sin(42*t + 19.0/10) + 4.0/13*sin(43*t + 19.0/12) + 2.0/9*sin(46*t + 15.0/8) + 9.0/7*sin(47*t + 13.0/7) + 10.0/13*sin(48*t + 15.0/8) - 55.0/7)*theta(47*PI -t)*theta(t - 43*PI) + (-5.0/6*sin(17.0/12 - 29*t) - 7.0/6*sin(17.0/12 - 28*t) - 6.0/17*sin(13.0/9 - 24*t) - 1.0/23*sin(9.0/17 - 23*t) - 1.0/5*sin(11.0/8 - 22*t) -sin(17.0/11 - 17*t) - 58.0/11*sin(23.0/15 - 11*t) - 73.0/20*sin(23.0/15 - 10*t) - 77.0/26*sin(14.0/9 - 7*t) - 4.0/9*sin(13.0/9 - 6*t) - 3.0/4*sin(11.0/7 - 5*t) - 6.0/17*sin(3.0/2 - 2*t) - 17.0/2*sin(11.0/7 -t) + 15.0/11*sin(3*t + 33.0/7) + 37.0/11*sin(4*t + 19.0/12) + 1.0/3*sin(8*t + 12.0/7) + 96.0/13*sin(9*t + 21.0/13) + 81.0/16*sin(12*t + 8.0/5) + 4.0/9*sin(13*t + 40.0/9) + 27.0/7*sin(14*t + 18.0/11) + 3.0/8*sin(15*t + 19.0/10) + 3.0/2*sin(16*t + 8.0/5) + 1.0/10*sin(18*t + 15.0/11) + 1.0/7*sin(19*t + 65.0/14) + 1.0/2*sin(20*t + 27.0/16) + 1.0/10*sin(21*t + 47.0/23) + 10.0/21*sin(25*t + 7.0/4) + 1.0/23*sin(26*t + 17.0/8) + 1.0/7*sin(27*t + 3.0/2) + 1.0/7*sin(30*t + 11.0/8) + 79.0/5)*theta(43*PI -t)*theta(t - 39*PI) + (-3.0/13*sin(14.0/9 - 49*t) - 1.0/19*sin(21.0/16 - 48*t) - 1.0/7*sin(22.0/15 - 46*t) - 1.0/8*sin(15.0/13 - 43*t) - 7.0/15*sin(7.0/5 - 41*t) - 1.0/30*sin(2.0/9 - 40*t) - 1.0/8*sin(7.0/5 - 37*t) - 1.0/8*sin(14.0/9 - 31*t) - 1.0/10*sin(13.0/11 - 30*t) - 1.0/5*sin(13.0/10 - 27*t) - 4.0/11*sin(14.0/9 - 26*t) - 2.0/9*sin(11.0/8 - 24*t) - 1.0/12*sin(3.0/4 - 23*t) - 1.0/27*sin(15.0/11 - 22*t) - 13.0/12*sin(17.0/11 - 19*t) - 15.0/4*sin(32.0/21 - 17*t) - 85.0/16*sin(29.0/19 - 15*t) - 24.0/13*sin(16.0/11 - 11*t) - 3.0/7*sin(11.0/8 - 8*t) - 9.0/7*sin(26.0/17 - 7*t) - 9.0/7*sin(17.0/11 - 6*t) + 30.0/11*sin(t + 61.0/13) + 3.0/5*sin(2*t + 8.0/5) + 28.0/27*sin(3*t + 17.0/11) + 6.0/7*sin(4*t + 14.0/3) + 3.0/7*sin(5*t + 16.0/9) + 2.0/5*sin(9*t + 7.0/5) + 7.0/9*sin(10*t + 26.0/17) + 17.0/4*sin(12*t + 14.0/9) + 185.0/13*sin(13*t + 8.0/5) + 39.0/11*sin(14*t + 17.0/11) + 48.0/11*sin(16*t + 8.0/5) + 23.0/8*sin(18*t + 14.0/9) + 56.0/55*sin(20*t + 14.0/9) + 1.0/5*sin(21*t + 13.0/3) + 1.0/27*sin(25*t + 17.0/8) + 1.0/12*sin(28*t + 17.0/12) + 1.0/78*sin(29*t + 51.0/11) + 1.0/6*sin(32*t + 33.0/7) + 6.0/17*sin(33*t + 33.0/7) + 1.0/13*sin(34*t + 9.0/8) + 1.0/13*sin(35*t + 19.0/14) + 1.0/30*sin(36*t + 25.0/6) + 4.0/7*sin(38*t + 29.0/19) +sin(39*t + 8.0/5) + 1.0/6*sin(42*t + 12.0/7) + 1.0/16*sin(44*t + 55.0/12) + 2.0/7*sin(45*t + 7.0/4) + 1.0/12*sin(47*t + 9.0/4) + 3.0/10*sin(50*t + 18.0/11) + 2745.0/98)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/22*sin(13.0/9 - 25*t) - 1.0/14*sin(17.0/12 - 23*t) - 1.0/94*sin(11.0/9 - 17*t) - 32.0/21*sin(14.0/9 - 4*t) + 415.0/7*sin(t + 33.0/7) + 169.0/6*sin(2*t + 47.0/10) + 1.0/12*sin(3*t + 13.0/9) + 5.0/12*sin(5*t + 11.0/7) + 21.0/10*sin(6*t + 61.0/13) + 1.0/21*sin(7*t + 89.0/22) + 1.0/5*sin(8*t + 13.0/9) + 4.0/11*sin(9*t + 31.0/21) + 2.0/7*sin(10*t + 22.0/15) + 2.0/9*sin(11*t + 60.0/13) + 1.0/7*sin(12*t + 37.0/8) + 1.0/6*sin(13*t + 14.0/9) + 1.0/15*sin(14*t + 13.0/9) + 1.0/12*sin(15*t + 37.0/8) + 1.0/84*sin(16*t + 7.0/9) + 1.0/16*sin(18*t + 13.0/8) + 1.0/7*sin(19*t + 37.0/8) + 1.0/49*sin(20*t + 45.0/11) + 1.0/27*sin(21*t + 9.0/7) + 1.0/9*sin(22*t + 3.0/2) + 1.0/11*sin(26*t + 3.0/2) + 703.0/13)*theta(35*PI -t)*theta(t - 31*PI) + (-1.0/2*sin(11.0/7 - 2*t) + 181.0/13*sin(t + 11.0/7) + 11.0/9*sin(3*t + 11.0/7) + 1.0/4*sin(4*t + 33.0/7) + 827.0/14)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/50*sin(13.0/10 - 40*t) - 1.0/40*sin(10.0/9 - 38*t) - 1.0/8*sin(3.0/2 - 35*t) - 3.0/13*sin(32.0/21 - 34*t) - 4.0/11*sin(23.0/15 - 26*t) - 1.0/48*sin(5.0/8 - 25*t) - 1.0/6*sin(35.0/23 - 24*t) - 1.0/4*sin(35.0/23 - 21*t) - 1.0/5*sin(3.0/2 - 17*t) - 3.0/8*sin(26.0/17 - 16*t) - 7.0/11*sin(14.0/9 - 14*t) - 8.0/11*sin(17.0/11 - 13*t) - 4.0/5*sin(23.0/15 - 12*t) - 2.0/7*sin(17.0/11 - 9*t) - 2.0/5*sin(35.0/23 - 7*t) - 5.0/3*sin(17.0/11 - 6*t) - 25.0/7*sin(14.0/9 - 5*t) - 94.0/5*sin(11.0/7 - 4*t) + 19.0/9*sin(t + 14.0/9) + 52.0/17*sin(2*t + 17.0/11) + 93.0/13*sin(3*t + 11.0/7) + 8.0/7*sin(8*t + 33.0/7) + 2.0/13*sin(10*t + 26.0/15) + 34.0/23*sin(11*t + 11.0/7) + 1.0/11*sin(15*t + 75.0/16) + 1.0/3*sin(18*t + 47.0/10) + 6.0/11*sin(19*t + 14.0/9) + 1.0/11*sin(20*t + 13.0/9) + 1.0/4*sin(22*t + 33.0/7) + 1.0/53*sin(23*t + 27.0/7) + 1.0/7*sin(28*t + 21.0/13) + 1.0/19*sin(29*t + 18.0/13) + 1.0/15*sin(30*t + 14.0/3) + 1.0/14*sin(31*t + 8.0/5) + 1.0/11*sin(32*t + 33.0/7) + 1.0/12*sin(37*t + 20.0/13) + 1.0/54*sin(39*t + 19.0/12) + 380.0/7)*theta(27*PI -t)*theta(t - 23*PI) + (-7.0/13*sin(11.0/7 - 4*t) - 4.0/13*sin(14.0/9 - 3*t) - 18.0/7*sin(11.0/7 - 2*t) -sin(11.0/7 -t) + 1529.0/23)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/95*sin(5.0/12 - 23*t) - 1.0/70*sin(5.0/16 - 17*t) - 63.0/8*sin(11.0/7 - 2*t) + 118.0/9*sin(t + 11.0/7) + 35.0/12*sin(3*t + 33.0/7) + 76.0/17*sin(4*t + 11.0/7) + 48.0/49*sin(5*t + 47.0/10) + 21.0/11*sin(6*t + 14.0/9) + 33.0/32*sin(7*t + 61.0/13) + 11.0/8*sin(8*t + 14.0/9) + 8.0/11*sin(9*t + 8.0/5) + 3.0/8*sin(10*t + 17.0/11) + 1.0/5*sin(11*t + 21.0/13) + 1.0/4*sin(12*t + 11.0/7) + 1.0/11*sin(13*t + 19.0/12) + 2.0/7*sin(14*t + 11.0/7) + 1.0/5*sin(15*t + 11.0/7) + 1.0/11*sin(16*t + 27.0/16) + 3.0/14*sin(18*t + 13.0/8) + 1.0/9*sin(19*t + 13.0/9) + 1.0/14*sin(20*t + 59.0/13) + 1.0/25*sin(21*t + 9.0/7) + 1.0/97*sin(22*t + 18.0/5) + 1.0/42*sin(24*t + 67.0/34) + 1.0/84*sin(25*t + 7.0/10) + 1.0/87*sin(26*t + 9.0/4) + 1.0/23*sin(27*t + 3.0/2) + 1.0/24*sin(28*t + 19.0/12) + 1.0/42*sin(29*t + 12.0/7) + 1.0/82*sin(30*t + 15.0/11) + 1.0/71*sin(32*t + 7.0/5) + 1.0/78*sin(33*t + 17.0/9) + 1.0/30*sin(34*t + 7.0/5) + 1.0/25*sin(36*t + 11.0/8) + 1.0/23*sin(37*t + 7.0/4) + 1.0/20*sin(38*t + 13.0/9) + 305.0/6)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/11*sin(1.0/2 - 6*t) + 417.0/52*sin(t + 11.0/5) + 33.0/4*sin(2*t + 37.0/9) + 27.0/13*sin(3*t + 20.0/7) + 4.0/11*sin(4*t + 1.0/9) + 39.0/38*sin(5*t + 19.0/18) + 212.0/3)*theta(15*PI -t)*theta(t - 11*PI) + (-5.0/6*sin(5.0/14 - 4*t) + 31.0/4*sin(t + 35.0/12) + 83.0/7*sin(2*t + 30.0/7) + 11.0/9*sin(3*t + 21.0/10) + 10.0/11*sin(5*t + 37.0/13) + 8.0/7*sin(6*t + 41.0/12) + 6.0/11*sin(7*t + 20.0/11) + 5.0/14*sin(8*t + 5.0/13) + 5.0/9*sin(9*t + 18.0/17) + 1.0/10*sin(10*t + 21.0/5) + 68.0/7)*theta(11*PI -t)*theta(t - 7*PI) + (195.0/11*sin(t + 15.0/8) + 1.0/34*sin(2*t + 11.0/4) + 23.0/12*sin(3*t + 52.0/21) + 5.0/11*sin(4*t + 13.0/4) + 5.0/12*sin(5*t + 34.0/11) + 1.0/5*sin(6*t + 41.0/12) + 597.0/8)*theta(7*PI -t)*theta(t - 3*PI) + (271.0/11*sin(t + 11.0/6) + 1.0/6*sin(2*t + 45.0/14) + 23.0/10*sin(3*t + 19.0/8) + 1.0/8*sin(4*t + 99.0/25) + 5.0/8*sin(5*t + 29.0/9) + 3.0/11*sin(6*t + 44.0/15) + 43.0/7)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-81.0/13*sin(11.0/7 -t) + 1.0/9*sin(2*t + 33.0/7) + 1.0/98*sin(3*t + 19.0/12) + 1.0/27*sin(4*t + 33.0/7) + 1.0/14*sin(5*t + 11.0/7) - 779.0/8)*theta(87*PI -t)*theta(t - 83*PI) + (-1.0/11*sin(29.0/19 - 53*t) - 1.0/8*sin(28.0/19 - 50*t) - 9.0/10*sin(13.0/9 - 45*t) - 1.0/22*sin(4.0/5 - 44*t) - 7.0/12*sin(10.0/7 - 40*t) - 7.0/13*sin(18.0/13 - 39*t) - 15.0/11*sin(25.0/17 - 31*t) - 5.0/3*sin(13.0/9 - 26*t) - 2.0/5*sin(17.0/11 - 23*t) - 1.0/3*sin(12.0/13 - 22*t) -sin(20.0/13 - 17*t) - 56.0/15*sin(11.0/7 - 15*t) - 65.0/14*sin(20.0/13 - 14*t) - 127.0/15*sin(26.0/17 - 10*t) - 141.0/13*sin(11.0/7 - 9*t) - 53.0/10*sin(19.0/13 - 7*t) - 13.0/12*sin(17.0/12 - 4*t) - 226.0/15*sin(11.0/7 - 3*t) + 55.0/7*sin(t + 47.0/10) + 46.0/7*sin(2*t + 8.0/5) + 390.0/19*sin(5*t + 19.0/12) + 331.0/9*sin(6*t + 11.0/7) + 275.0/12*sin(8*t + 8.0/5) + 35.0/4*sin(11*t + 13.0/8) + 25.0/8*sin(12*t + 21.0/13) + 1.0/14*sin(13*t + 13.0/8) + 38.0/11*sin(16*t + 27.0/16) + 8.0/13*sin(18*t + 13.0/11) + 30.0/31*sin(19*t + 11.0/7) + 34.0/9*sin(20*t + 13.0/8) + 2.0/5*sin(21*t + 47.0/10) + 38.0/13*sin(24*t + 23.0/14) + 4.0/3*sin(25*t + 11.0/7) + 5.0/16*sin(27*t + 37.0/18) + 1.0/8*sin(28*t + 22.0/13) + 1.0/15*sin(29*t + 32.0/7) + 28.0/17*sin(30*t + 5.0/3) + 1.0/7*sin(32*t + 32.0/7) + 3.0/8*sin(33*t + 58.0/13) + 5.0/8*sin(34*t + 11.0/7) + 2.0/11*sin(35*t + 3.0/2) + 4.0/7*sin(36*t + 14.0/9) + 11.0/15*sin(37*t + 19.0/12) + 3.0/8*sin(38*t + 23.0/13) + 1.0/16*sin(41*t + 17.0/5) + 1.0/11*sin(42*t + 7.0/10) + 1.0/29*sin(43*t + 41.0/10) + 7.0/10*sin(46*t + 12.0/7) + 2.0/13*sin(47*t + 22.0/15) + 1.0/5*sin(48*t + 10.0/7) + 1.0/6*sin(49*t + 7.0/5) + 1.0/12*sin(51*t + 5.0/2) + 1.0/14*sin(52*t + 16.0/11) - 162)*theta(83*PI -t)*theta(t - 79*PI) + (-1.0/7*sin(28.0/19 - 36*t) - 1.0/4*sin(26.0/17 - 30*t) - 3.0/11*sin(32.0/21 - 26*t) - 1.0/14*sin(23.0/15 - 22*t) - 4.0/15*sin(17.0/11 - 21*t) - 2.0/5*sin(17.0/11 - 16*t) - 9.0/8*sin(14.0/9 - 12*t) - 15.0/7*sin(17.0/11 - 9*t) - 12.0/7*sin(17.0/11 - 8*t) - 137.0/9*sin(11.0/7 -t) + 95.0/16*sin(2*t + 11.0/7) + 101.0/9*sin(3*t + 19.0/12) + 9.0/2*sin(4*t + 8.0/5) + 51.0/7*sin(5*t + 19.0/12) + 7.0/11*sin(6*t + 14.0/3) + 20.0/7*sin(7*t + 19.0/12) + 21.0/8*sin(10*t + 8.0/5) + 17.0/9*sin(11*t + 8.0/5) + 5.0/11*sin(13*t + 11.0/7) + 2.0/7*sin(14*t + 17.0/10) + 5.0/11*sin(15*t + 13.0/8) + 7.0/13*sin(17*t + 21.0/13) + 6.0/17*sin(18*t + 33.0/7) + 5.0/14*sin(19*t + 13.0/8) + 3.0/4*sin(20*t + 23.0/14) + 1.0/15*sin(23*t + 21.0/13) + 1.0/7*sin(24*t + 9.0/5) + 2.0/9*sin(25*t + 13.0/8) + 2.0/9*sin(27*t + 5.0/3) + 1.0/6*sin(28*t + 7.0/4) + 5.0/16*sin(29*t + 28.0/17) + 1.0/47*sin(31*t + 24.0/13) + 1.0/12*sin(32*t + 17.0/10) + 1.0/88*sin(33*t + 19.0/5) + 3.0/13*sin(34*t + 12.0/7) - 236.0/7)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/4*sin(7.0/9 - 68*t) - 1.0/3*sin(4.0/5 - 67*t) - 5.0/7*sin(19.0/18 - 63*t) - 1.0/5*sin(6.0/11 - 62*t) - 1.0/10*sin(1.0/4 - 61*t) - 3.0/14*sin(4.0/9 - 57*t) - 1.0/55*sin(9.0/11 - 55*t) - 1.0/4*sin(10.0/11 - 54*t) - 3.0/8*sin(11.0/9 - 50*t) - 2.0/11*sin(27.0/26 - 49*t) - 1.0/5*sin(7.0/6 - 48*t) - 6.0/11*sin(9.0/8 - 47*t) - 6.0/7*sin(25.0/24 - 46*t) - 3.0/7*sin(5.0/4 - 45*t) - 1.0/2*sin(11.0/9 - 39*t) - 52.0/21*sin(3.0/2 - 27*t) - 7.0/4*sin(7.0/8 - 21*t) - 43.0/4*sin(7.0/5 - 20*t) - 16.0/11*sin(19.0/14 - 14*t) - 35.0/6*sin(17.0/12 - 13*t) - 103.0/26*sin(17.0/12 - 12*t) - 29.0/12*sin(37.0/25 - 11*t) - 71.0/24*sin(10.0/7 - 10*t) - 36.0/7*sin(3.0/2 - 9*t) - 7.0/9*sin(16.0/11 - 8*t) - 7*sin(20.0/13 - 5*t) - 43.0/4*sin(14.0/9 - 2*t) - 1.0/6*sin(11.0/8 -t) + 9.0/13*sin(3*t + 89.0/19) + 14.0/9*sin(4*t + 18.0/11) + 7.0/11*sin(6*t + 7.0/4) + 20.0/7*sin(7*t + 17.0/10) + 53.0/18*sin(15*t + 16.0/9) + 60.0/11*sin(16*t + 19.0/11) + 19.0/8*sin(17*t + 12.0/7) + 43.0/4*sin(18*t + 11.0/6) + 44.0/3*sin(19*t + 7.0/4) + 22.0/7*sin(22*t + 9.0/5) + 9.0/10*sin(23*t + 23.0/10) + 55.0/9*sin(24*t + 12.0/7) + 19.0/9*sin(25*t + 61.0/13) + 5.0/4*sin(26*t + 16.0/13) + 36.0/13*sin(28*t + 12.0/7) + 46.0/45*sin(29*t + 57.0/13) + 89.0/88*sin(30*t + 11.0/8) + 30.0/31*sin(31*t + 31.0/7) + 5.0/2*sin(32*t + 20.0/11) + 4.0/13*sin(33*t + 33.0/8) + 4.0/9*sin(34*t + 29.0/19) + 2.0/11*sin(35*t + 31.0/8) + 2.0/3*sin(36*t + 8.0/5) + 1.0/4*sin(37*t + 22.0/5) + 29.0/28*sin(38*t + 25.0/14) + 5.0/8*sin(40*t + 19.0/10) + 7.0/9*sin(41*t + 19.0/9) + 1.0/7*sin(42*t + 17.0/12) + 3.0/14*sin(43*t + 14.0/3) + 1.0/3*sin(44*t + 2) + 1.0/7*sin(51*t + 19.0/12) + 5.0/12*sin(52*t + 31.0/13) + 3.0/8*sin(53*t + 43.0/22) + 2.0/5*sin(56*t + 15.0/7) + 1.0/7*sin(58*t + 35.0/8) + 16.0/13*sin(59*t + 17.0/8) + 1.0/4*sin(60*t + 51.0/11) + 7.0/13*sin(64*t + 133.0/66) + 1.0/2*sin(65*t + 11.0/4) + 10.0/21*sin(66*t + 17.0/8) + 4.0/11*sin(69*t + 9.0/4) + 1.0/10*sin(70*t + 13.0/5) + 1.0/12*sin(71*t + 20.0/19) + 1.0/28*sin(72*t + 23.0/9) + 5.0/14*sin(73*t + 19.0/9) + 79.0/5)*theta(75*PI -t)*theta(t - 71*PI) + (-6.0/13*sin(11.0/7 - 44*t) - 1.0/8*sin(7.0/5 - 43*t) - 1.0/5*sin(14.0/11 - 42*t) - 1.0/2*sin(17.0/11 - 41*t) - 2.0/5*sin(13.0/9 - 40*t) - 3.0/5*sin(3.0/2 - 39*t) - 18.0/17*sin(25.0/17 - 38*t) - 16.0/13*sin(23.0/15 - 37*t) - 13.0/12*sin(17.0/11 - 36*t) - 1.0/6*sin(11.0/8 - 35*t) - 29.0/10*sin(20.0/13 - 27*t) - 5.0/8*sin(26.0/17 - 24*t) - 5.0/7*sin(28.0/19 - 17*t) - 1.0/22*sin(15.0/14 - 14*t) - 22.0/23*sin(14.0/9 - 11*t) - 13.0/19*sin(37.0/25 - 10*t) - 1.0/8*sin(9.0/7 - 9*t) - 9.0/11*sin(14.0/9 - 5*t) - 2.0/11*sin(22.0/15 - 4*t) - 22.0/3*sin(11.0/7 - 3*t) - 53.0/10*sin(11.0/7 - 2*t) - 243.0/8*sin(11.0/7 -t) + 3.0/14*sin(6*t + 12.0/7) + 2.0/7*sin(7*t + 23.0/5) + 2.0/5*sin(8*t + 17.0/11) + 13.0/10*sin(12*t + 47.0/10) + 8.0/5*sin(13*t + 47.0/10) + 11.0/4*sin(15*t + 11.0/7) + 9.0/4*sin(16*t + 17.0/11) + 11.0/2*sin(18*t + 33.0/7) + 69.0/16*sin(19*t + 75.0/16) + 84.0/13*sin(20*t + 14.0/9) + 49.0/10*sin(21*t + 11.0/7) + 32.0/7*sin(22*t + 75.0/16) + 15.0/7*sin(23*t + 26.0/17) + 31.0/7*sin(25*t + 33.0/7) + 14.0/11*sin(26*t + 38.0/25) + 5.0/2*sin(28*t + 8.0/5) + 5.0/12*sin(29*t + 75.0/16) + 11.0/4*sin(30*t + 21.0/13) + 4.0/5*sin(31*t + 18.0/11) + 11.0/8*sin(32*t + 5.0/3) + 8.0/9*sin(33*t + 19.0/12) + 8.0/13*sin(34*t + 19.0/12) + 1.0/25*sin(45*t + 113.0/25) + 3.0/11*sin(46*t + 16.0/11) + 1.0/21*sin(47*t + 47.0/12) + 2.0/5*sin(48*t + 13.0/8) + 2.0/7*sin(49*t + 13.0/8) + 5.0/13*sin(50*t + 17.0/10) + 8.0/11*sin(51*t + 23.0/14) + 4.0/11*sin(52*t + 21.0/13) + 2.0/7*sin(53*t + 22.0/13) + 5.0/8*sin(54*t + 47.0/10) + 1.0/9*sin(55*t + 15.0/8) + 1.0/5*sin(56*t + 3.0/2) - 19.0/2)*theta(71*PI -t)*theta(t - 67*PI) + (-1.0/5*sin(7.0/5 - 39*t) - 5.0/7*sin(28.0/19 - 35*t) - 8.0/15*sin(25.0/17 - 33*t) - 11.0/6*sin(14.0/9 - 26*t) - 8.0/7*sin(3.0/2 - 24*t) - 3.0/7*sin(7.0/5 - 22*t) - 3.0/5*sin(3.0/2 - 19*t) - 47.0/31*sin(14.0/9 - 17*t) - 15.0/4*sin(14.0/9 - 12*t) - 33.0/8*sin(14.0/9 - 2*t) - 27.0/8*sin(11.0/7 -t) + 34.0/9*sin(3*t + 33.0/7) + 75.0/19*sin(4*t + 33.0/7) + 107.0/16*sin(5*t + 47.0/10) + 47.0/6*sin(6*t + 33.0/7) + 31.0/4*sin(7*t + 33.0/7) + 58.0/23*sin(8*t + 14.0/3) + 191.0/16*sin(9*t + 11.0/7) + 65.0/4*sin(10*t + 14.0/9) + 7.0/13*sin(11*t + 51.0/11) + 377.0/47*sin(13*t + 14.0/9) + 2.0/9*sin(14*t + 103.0/23) + 1.0/5*sin(15*t + 20.0/11) + 9.0/2*sin(16*t + 14.0/9) + 49.0/16*sin(18*t + 11.0/7) + 1.0/2*sin(20*t + 11.0/7) + 7.0/3*sin(21*t + 11.0/7) + 16.0/9*sin(23*t + 8.0/5) + 4.0/13*sin(25*t + 25.0/14) + 1.0/15*sin(27*t + 12.0/5) + 3.0/7*sin(28*t + 8.0/5) + 2.0/7*sin(29*t + 7.0/5) + 2.0/9*sin(30*t + 8.0/5) + 15.0/11*sin(31*t + 33.0/7) + 8.0/7*sin(32*t + 11.0/7) + 3.0/10*sin(34*t + 7.0/4) + 10.0/9*sin(36*t + 11.0/7) + 13.0/12*sin(37*t + 33.0/7) + 4.0/7*sin(38*t + 23.0/14) + 7.0/9*sin(40*t + 19.0/12) + 128.0/3)*theta(67*PI -t)*theta(t - 63*PI) + (-1.0/9*sin(7.0/6 - 26*t) + 79.0/6*sin(t + 33.0/7) + 21.0/8*sin(2*t + 11.0/7) + 41.0/14*sin(3*t + 17.0/11) + 15.0/7*sin(4*t + 20.0/13) + 3.0/2*sin(5*t + 11.0/7) + 16.0/15*sin(6*t + 33.0/7) + 1.0/4*sin(7*t + 18.0/11) + 3.0/10*sin(8*t + 18.0/13) + 16.0/9*sin(9*t + 20.0/13) + 20.0/11*sin(10*t + 20.0/13) + 4.0/7*sin(11*t + 23.0/15) + 4.0/13*sin(12*t + 86.0/19) + 14.0/11*sin(13*t + 61.0/13) + 11.0/8*sin(14*t + 37.0/8) + 29.0/8*sin(15*t + 14.0/3) + 153.0/38*sin(16*t + 51.0/11) + 50.0/9*sin(17*t + 37.0/8) + 32.0/9*sin(18*t + 37.0/8) + 13.0/9*sin(19*t + 10.0/7) + 15.0/4*sin(20*t + 13.0/9) + 7.0/9*sin(21*t + 68.0/15) + 28.0/9*sin(22*t + 32.0/7) + 11.0/16*sin(23*t + 17.0/12) + 10.0/11*sin(24*t + 10.0/7) + 9.0/8*sin(25*t + 23.0/5) + 15.0/8*sin(27*t + 26.0/17) + 41.0/15*sin(28*t + 47.0/10) + 20.0/9*sin(29*t + 13.0/8) + 19.0/8*sin(30*t + 33.0/7) + 2.0/3*sin(31*t + 17.0/10) + 5.0/8*sin(32*t + 14.0/3) + 1.0/8*sin(33*t + 9.0/2) + 3.0/11*sin(34*t + 77.0/17) + 1.0/17*sin(35*t + 20.0/11) + 4.0/11*sin(36*t + 37.0/8) + 5.0/14*sin(37*t + 22.0/15) + 1.0/4*sin(38*t + 7.0/6) + 10.0/19*sin(39*t + 10.0/7) + 2.0/11*sin(40*t + 23.0/5) + 3.0/11*sin(41*t + 13.0/3) + 4.0/9*sin(42*t + 7.0/5) + 5.0/9*sin(43*t + 5.0/4) + 1.0/6*sin(44*t + 11.0/8) + 1.0/3*sin(45*t + 22.0/5) + 3.0/5*sin(46*t + 9.0/2) + 3.0/5*sin(47*t + 86.0/19) + 3.0/8*sin(48*t + 31.0/7) + 2242.0/27)*theta(63*PI -t)*theta(t - 59*PI) + (-1.0/5*sin(19.0/15 - 31*t) - 6.0/11*sin(3.0/2 - 22*t) + 108.0/13*sin(t + 11.0/7) + 68.0/11*sin(2*t + 14.0/9) + 19.0/6*sin(3*t + 17.0/11) + 1.0/4*sin(4*t + 26.0/25) + 9.0/4*sin(5*t + 37.0/8) + 11.0/3*sin(6*t + 65.0/14) + 4.0/9*sin(7*t + 19.0/14) +sin(8*t + 3.0/2) + 19.0/15*sin(9*t + 3.0/2) + 29.0/9*sin(10*t + 3.0/2) + 4.0/5*sin(11*t + 15.0/14) + 35.0/11*sin(12*t + 31.0/7) + 1191.0/85*sin(13*t + 37.0/8) + 116.0/9*sin(14*t + 22.0/15) + 43.0/12*sin(15*t + 13.0/10) + 17.0/6*sin(16*t + 9.0/2) +sin(17*t + 40.0/9) + 10.0/3*sin(18*t + 50.0/11) + 4.0/9*sin(19*t + 14.0/3) + 89.0/30*sin(20*t + 7.0/5) + 1.0/3*sin(21*t + 17.0/12) + 7.0/4*sin(23*t + 3.0/2) + 5.0/2*sin(24*t + 37.0/8) + 15.0/8*sin(25*t + 46.0/11) + 45.0/13*sin(26*t + 37.0/8) + 49.0/8*sin(27*t + 7.0/5) + 19.0/10*sin(28*t + 33.0/7) + 15.0/11*sin(29*t + 46.0/11) + 4.0/13*sin(30*t + 46.0/47) +sin(32*t + 6.0/5) + 22.0/13*sin(33*t + 13.0/10) + 27.0/26*sin(34*t + 14.0/13) + 19.0/12*sin(35*t + 9.0/8) + 27.0/13*sin(36*t + 11.0/9) + 9.0/10*sin(37*t + 17.0/18) + 12.0/13*sin(38*t + 9.0/7) + 5.0/11*sin(39*t + 5.0/6) + 2.0/3*sin(40*t + 17.0/13) + 6.0/7*sin(41*t + 31.0/7) + 3.0/4*sin(42*t + 21.0/5) + 7.0/12*sin(43*t + 6.0/5) + 7.0/10*sin(44*t + 7.0/9) + 3.0/2*sin(45*t + 7.0/6) + 5.0/6*sin(46*t + 16.0/15) + 3.0/11*sin(47*t + 40.0/9) + 1.0/4*sin(48*t + 3.0/5) + 2.0/9*sin(49*t + 29.0/15) + 7.0/9*sin(50*t + 31.0/7) + 597.0/7)*theta(59*PI -t)*theta(t - 55*PI) + (-62.0/61*sin(31.0/21 - 34*t) - 12.0/7*sin(32.0/21 - 32*t) - 11.0/6*sin(3.0/2 - 30*t) - 5.0/3*sin(17.0/11 - 27*t) - 88.0/25*sin(20.0/13 - 25*t) - 24.0/23*sin(23.0/15 - 24*t) - 15.0/8*sin(22.0/15 - 15*t) - 10.0/3*sin(38.0/25 - 13*t) - 43.0/12*sin(13.0/9 - 12*t) - 16.0/13*sin(35.0/23 - 8*t) - 7.0/8*sin(11.0/7 - 7*t) - 1.0/18*sin(22.0/21 -t) + 29.0/13*sin(2*t + 8.0/5) + 5.0/12*sin(3*t + 22.0/15) + 1.0/16*sin(4*t + 14.0/11) + 7.0/9*sin(5*t + 47.0/10) + 1.0/40*sin(6*t + 12.0/7) + 16.0/11*sin(9*t + 4.0/3) + 53.0/6*sin(10*t + 14.0/9) + 164.0/15*sin(11*t + 11.0/7) + 46.0/9*sin(14*t + 8.0/5) + 26.0/9*sin(16*t + 14.0/9) + 1.0/3*sin(17*t + 49.0/11) + 5.0/8*sin(18*t + 19.0/11) + 2*sin(19*t + 9.0/2) + 79.0/14*sin(20*t + 37.0/8) + 89.0/11*sin(21*t + 47.0/10) + 30.0/11*sin(22*t + 23.0/5) + 52.0/11*sin(23*t + 17.0/10) + 35.0/13*sin(26*t + 7.0/4) + 1.0/8*sin(28*t + 11.0/12) + 9.0/7*sin(29*t + 13.0/8) + 7.0/4*sin(31*t + 8.0/5) + 13.0/10*sin(33*t + 11.0/7) + 3.0/4*sin(35*t + 11.0/7) + 1.0/7*sin(36*t + 53.0/12) + 8.0/9*sin(37*t + 13.0/8) + 1.0/12*sin(38*t + 22.0/5) + 1.0/6*sin(39*t + 25.0/6) + 8.0/7*sin(40*t + 67.0/15) + 17.0/11*sin(41*t + 41.0/9) + 4.0/3*sin(42*t + 37.0/8) + 528.0/7)*theta(55*PI -t)*theta(t - 51*PI) + (17.0/7*sin(t + 47.0/10) + 44.0/7*sin(2*t + 14.0/9) + 13.0/3*sin(3*t + 20.0/13) + 22.0/15*sin(4*t + 38.0/25) + 3.0/7*sin(5*t + 28.0/19) + 5.0/2*sin(6*t + 31.0/21) + 26.0/11*sin(7*t + 32.0/21) + 11.0/16*sin(8*t + 26.0/17) + 3*sin(9*t + 7.0/5) + 28.0/9*sin(10*t + 10.0/7) + 190.0/21*sin(11*t + 41.0/9) + 97.0/7*sin(12*t + 32.0/7) + 19.0/9*sin(13*t + 19.0/13) + 73.0/21*sin(14*t + 17.0/13) + 21.0/20*sin(15*t + 9.0/7) + 12.0/7*sin(16*t + 23.0/15) + 11.0/9*sin(17*t + 51.0/11) + 80.0/27*sin(18*t + 19.0/14) + 49.0/48*sin(19*t + 17.0/13) + 12.0/7*sin(20*t + 95.0/21) + 7.0/8*sin(21*t + 4.0/3) + 1.0/52*sin(22*t + 5.0/4) + 20.0/9*sin(23*t + 53.0/12) + 4.0/3*sin(24*t + 58.0/13) + 53.0/52*sin(25*t + 23.0/17) + 13.0/7*sin(26*t + 76.0/17) + 8.0/13*sin(27*t + 40.0/9) + 24.0/23*sin(28*t + 15.0/11) + 20.0/9*sin(29*t + 49.0/11) + 7.0/12*sin(30*t + 31.0/21) + 2.0/3*sin(31*t + 32.0/7) +sin(32*t + 53.0/12) + 1.0/7*sin(33*t + 30.0/11) + 7.0/5*sin(34*t + 49.0/11) + 4.0/13*sin(35*t + 23.0/13) + 19.0/20*sin(36*t + 40.0/9) + 1.0/3*sin(37*t + 13.0/10) + 1.0/7*sin(38*t + 8.0/15) + 4.0/9*sin(39*t + 43.0/10) + 1.0/12*sin(40*t + 11.0/6) + 1.0/7*sin(41*t + 75.0/74) + 1.0/3*sin(42*t + 1) + 589.0/9)*theta(51*PI -t)*theta(t - 47*PI) + (-1.0/9*sin(23.0/24 - 48*t) - 1.0/9*sin(16.0/13 - 47*t) - 1.0/16*sin(9.0/8 - 43*t) - 1.0/26*sin(1.0/2 - 42*t) - 1.0/41*sin(5.0/7 - 41*t) - 2.0/3*sin(3.0/2 - 37*t) - 11.0/9*sin(38.0/25 - 35*t) - 11.0/12*sin(3.0/2 - 33*t) - 14.0/29*sin(5.0/4 - 32*t) - 13.0/8*sin(10.0/7 - 31*t) - 5.0/8*sin(11.0/7 - 28*t) - 6.0/7*sin(22.0/15 - 26*t) - 4.0/15*sin(14.0/9 - 25*t) - 9.0/8*sin(22.0/15 - 23*t) - 11.0/16*sin(10.0/7 - 21*t) - 4.0/5*sin(22.0/15 - 20*t) - 5.0/9*sin(4.0/3 - 18*t) - 29.0/28*sin(10.0/7 - 14*t) - 3.0/4*sin(19.0/14 - 13*t) - 3.0/13*sin(17.0/12 - 9*t) - 1.0/3*sin(26.0/17 - 4*t) + 58.0/7*sin(t + 11.0/7) + 7.0/8*sin(2*t + 75.0/16) + 7.0/9*sin(3*t + 11.0/7) + 5.0/9*sin(5*t + 8.0/5) + 8.0/11*sin(6*t + 28.0/17) + 1.0/3*sin(7*t + 13.0/8) + 5.0/8*sin(8*t + 17.0/11) + 3.0/10*sin(10*t + 23.0/15) + 1.0/13*sin(11*t + 45.0/23) + 1.0/2*sin(12*t + 25.0/17) + 28.0/9*sin(15*t + 5.0/3) + 69.0/11*sin(16*t + 23.0/14) + 7.0/8*sin(17*t + 22.0/13) + 25.0/11*sin(19*t + 13.0/8) + 5.0/8*sin(22*t + 14.0/9) + 3.0/5*sin(24*t + 22.0/13) + 1.0/5*sin(27*t + 34.0/23) +sin(29*t + 9.0/5) + 1.0/7*sin(30*t + 37.0/8) + 4.0/5*sin(34*t + 22.0/13) + 18.0/19*sin(36*t + 13.0/8) + 1.0/4*sin(38*t + 19.0/12) + 1.0/17*sin(39*t + 17.0/5) + 1.0/8*sin(40*t + 5.0/3) + 3.0/10*sin(44*t + 11.0/6) + 1.0/18*sin(45*t + 129.0/64) + 1.0/17*sin(46*t + 18.0/11) + 761.0/20)*theta(47*PI -t)*theta(t - 43*PI) + (-5.0/12*sin(17.0/12 - 24*t) - 6.0/19*sin(28.0/19 - 23*t) - 3.0/4*sin(26.0/17 - 19*t) - 33.0/16*sin(17.0/11 - 11*t) - 11.0/6*sin(23.0/15 - 10*t) - 3.0/2*sin(17.0/11 - 8*t) - 16.0/15*sin(17.0/11 - 7*t) - 16.0/11*sin(11.0/7 - 3*t) - 35.0/11*sin(14.0/9 - 2*t) - 134.0/11*sin(11.0/7 -t) + 33.0/10*sin(4*t + 8.0/5) + 14.0/9*sin(5*t + 8.0/5) + 12.0/11*sin(6*t + 19.0/12) + 8.0/5*sin(9*t + 21.0/13) + 11.0/3*sin(12*t + 13.0/8) + 17.0/6*sin(13*t + 5.0/3) + 45.0/13*sin(14*t + 18.0/11) + 18.0/13*sin(15*t + 22.0/13) + 9.0/7*sin(16*t + 18.0/11) + 1.0/3*sin(17*t + 20.0/11) + 1.0/2*sin(18*t + 18.0/11) + 1.0/9*sin(20*t + 26.0/17) + 1.0/5*sin(21*t + 9.0/5) + 1.0/8*sin(22*t + 8.0/5) + 1.0/6*sin(25*t + 14.0/3) + 5.0/13*sin(26*t + 22.0/13) + 2.0/5*sin(27*t + 7.0/4) + 2.0/9*sin(28*t + 13.0/8) + 1.0/4*sin(29*t + 61.0/13) + 10.0/11*sin(30*t + 5.0/3) + 191.0/5)*theta(43*PI -t)*theta(t - 39*PI) + (-1.0/32*sin(2.0/11 - 50*t) - 1.0/10*sin(7.0/5 - 47*t) - 1.0/14*sin(20.0/13 - 46*t) - 1.0/9*sin(35.0/23 - 44*t) - 1.0/15*sin(14.0/9 - 43*t) - 1.0/9*sin(19.0/14 - 41*t) - 5.0/14*sin(22.0/15 - 37*t) - 2.0/9*sin(11.0/7 - 35*t) - 5.0/9*sin(28.0/19 - 33*t) - 1.0/5*sin(10.0/9 - 30*t) - 13.0/27*sin(23.0/17 - 28*t) - 1.0/11*sin(8.0/7 - 22*t) - 7.0/20*sin(10.0/7 - 21*t) - 3.0/8*sin(26.0/17 - 20*t) - 1.0/13*sin(13.0/9 - 19*t) - 7.0/9*sin(20.0/13 - 18*t) - 2.0/7*sin(7.0/5 - 11*t) - 1.0/8*sin(11.0/8 - 10*t) - 4.0/13*sin(17.0/11 - 8*t) - 4.0/7*sin(14.0/9 - 7*t) - 7.0/10*sin(11.0/7 - 6*t) - 20.0/19*sin(11.0/7 - 4*t) - 20.0/3*sin(11.0/7 -t) + 3.0/4*sin(2*t + 8.0/5) + 1.0/5*sin(3*t + 65.0/14) + 3.0/5*sin(5*t + 8.0/5) + 5.0/13*sin(9*t + 20.0/13) + 9.0/10*sin(12*t + 14.0/9) + 11.0/6*sin(13*t + 19.0/12) + 3.0/13*sin(14*t + 34.0/23) + 3.0/13*sin(15*t + 19.0/13) + 1.0/11*sin(16*t + 16.0/11) + 2.0/9*sin(17*t + 11.0/7) + 6.0/17*sin(23*t + 17.0/11) + 1.0/6*sin(24*t + 10.0/9) + 16.0/13*sin(25*t + 14.0/9) + 21.0/8*sin(26*t + 8.0/5) + 7.0/11*sin(27*t + 16.0/11) + 5.0/12*sin(29*t + 11.0/7) + 1.0/9*sin(31*t + 5.0/4) + 10.0/13*sin(32*t + 21.0/13) + 4.0/7*sin(34*t + 13.0/8) + 2.0/9*sin(36*t + 10.0/7) + 3.0/7*sin(38*t + 19.0/12) + 1.0/15*sin(39*t + 29.0/19) + 1.0/18*sin(40*t + 10.0/9) + 1.0/31*sin(42*t + 5.0/4) + 1.0/10*sin(45*t + 65.0/14) + 1.0/13*sin(48*t + 3.0/2) + 1.0/37*sin(49*t + 17.0/11) + 731.0/12)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/42*sin(6.0/7 - 19*t) - 1.0/9*sin(19.0/13 - 17*t) - 2.0/13*sin(7.0/5 - 13*t) - 23.0/11*sin(11.0/7 - 5*t) + 793.0/14*sin(t + 33.0/7) + 91.0/2*sin(2*t + 11.0/7) + 28.0/5*sin(3*t + 17.0/11) + 95.0/16*sin(4*t + 11.0/7) + 25.0/8*sin(6*t + 11.0/7) + 11.0/15*sin(7*t + 20.0/13) + 35.0/13*sin(8*t + 14.0/9) + 2.0/7*sin(9*t + 7.0/5) + 19.0/12*sin(10*t + 11.0/7) + 1.0/7*sin(11*t + 5.0/4) + 6.0/7*sin(12*t + 11.0/7) + 2.0/3*sin(14*t + 11.0/7) + 1.0/4*sin(15*t + 13.0/9) + 9.0/14*sin(16*t + 14.0/9) + 3.0/13*sin(18*t + 27.0/16) + 2.0/5*sin(20*t + 38.0/25) + 1.0/12*sin(21*t + 19.0/12) + 1.0/3*sin(22*t + 29.0/19) + 1.0/39*sin(23*t + 23.0/11) + 3.0/13*sin(24*t + 14.0/9) + 1.0/22*sin(25*t + 67.0/15) + 2.0/9*sin(26*t + 8.0/5) - 1611.0/23)*theta(35*PI -t)*theta(t - 31*PI) + (7.0/5*sin(t + 11.0/7) + 21.0/10*sin(2*t + 11.0/7) + 11.0/14*sin(3*t + 11.0/7) + 7.0/15*sin(4*t + 11.0/7) - 1107.0/11)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/16*sin(20.0/13 - 38*t) - 1.0/19*sin(23.0/15 - 37*t) - 1.0/33*sin(7.0/5 - 35*t) - 1.0/10*sin(11.0/7 - 32*t) - 2.0/11*sin(14.0/9 - 26*t) - 1.0/7*sin(11.0/7 - 25*t) - 1.0/9*sin(23.0/15 - 24*t) - 1.0/34*sin(7.0/6 - 16*t) - 8.0/15*sin(14.0/9 - 15*t) - 5.0/8*sin(11.0/7 - 13*t) - 1.0/6*sin(3.0/2 - 12*t) - 11.0/6*sin(11.0/7 - 7*t) - 4.0/3*sin(11.0/7 - 5*t) - 22.0/7*sin(11.0/7 - 4*t) - 1.0/12*sin(10.0/7 - 3*t) - 11.0/9*sin(14.0/9 - 2*t) + 11.0/3*sin(t + 11.0/7) + 16.0/13*sin(6*t + 11.0/7) + 12.0/7*sin(8*t + 11.0/7) + 1.0/9*sin(9*t + 60.0/13) + 2.0/3*sin(10*t + 47.0/10) + 7.0/6*sin(11*t + 11.0/7) + 1.0/15*sin(14*t + 7.0/5) + 1.0/48*sin(17*t + 1) + 2.0/11*sin(18*t + 47.0/10) + 1.0/15*sin(19*t + 18.0/11) + 2.0/11*sin(20*t + 23.0/14) + 1.0/12*sin(21*t + 18.0/11) + 2.0/7*sin(22*t + 11.0/7) + 1.0/24*sin(27*t + 9.0/7) + 1.0/11*sin(28*t + 17.0/11) + 1.0/21*sin(30*t + 14.0/9) + 1.0/17*sin(31*t + 9.0/2) + 1.0/10*sin(33*t + 18.0/11) + 1.0/16*sin(34*t + 13.0/8) + 1.0/10*sin(36*t + 18.0/11) + 1.0/21*sin(39*t + 23.0/14) + 1.0/61*sin(40*t + 9.0/8) - 1027.0/12)*theta(27*PI -t)*theta(t - 23*PI) + (-10.0/19*sin(11.0/7 - 4*t) + 57.0/7*sin(t + 11.0/7) + 32.0/31*sin(2*t + 33.0/7) + 1.0/22*sin(3*t + 23.0/15) - 551.0/10)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/25*sin(20.0/13 - 34*t) - 1.0/43*sin(3.0/2 - 32*t) - 1.0/18*sin(14.0/9 - 30*t) - 1.0/18*sin(11.0/7 - 28*t) - 1.0/12*sin(14.0/9 - 22*t) - 1.0/11*sin(17.0/11 - 20*t) - 1.0/12*sin(11.0/7 - 18*t) - 1.0/10*sin(11.0/7 - 16*t) - 2.0/11*sin(11.0/7 - 14*t) - 6.0/7*sin(11.0/7 - 10*t) + 557.0/31*sin(t + 11.0/7) + 133.0/8*sin(2*t + 11.0/7) + 1.0/9*sin(3*t + 32.0/7) + 3.0/11*sin(4*t + 8.0/5) + 29.0/28*sin(5*t + 11.0/7) + 5.0/4*sin(6*t + 11.0/7) + 1.0/14*sin(7*t + 65.0/14) + 7.0/12*sin(8*t + 33.0/7) + 22.0/15*sin(9*t + 11.0/7) + 1.0/3*sin(11*t + 11.0/7) + 1.0/64*sin(12*t + 67.0/15) + 1.0/35*sin(13*t + 8.0/7) + 1.0/5*sin(15*t + 14.0/9) + 1.0/11*sin(17*t + 14.0/9) + 1.0/7*sin(19*t + 11.0/7) + 1.0/9*sin(21*t + 13.0/8) + 1.0/27*sin(23*t + 23.0/13) + 1.0/69*sin(24*t + 17.0/10) + 1.0/22*sin(25*t + 8.0/5) + 1.0/17*sin(26*t + 47.0/10) + 1.0/10*sin(27*t + 11.0/7) + 1.0/14*sin(29*t + 26.0/17) + 1.0/44*sin(31*t + 3.0/2) + 1.0/58*sin(35*t + 13.0/8) + 1.0/38*sin(36*t + 75.0/16) - 499.0/10)*theta(19*PI -t)*theta(t - 15*PI) + (-49.0/11*sin(13.0/12 - 2*t) + 9.0/4*sin(t + 8.0/3) + 7.0/8*sin(3*t + 49.0/11) + 4.0/5*sin(4*t + 83.0/21) + 3.0/5*sin(5*t + 18.0/17) + 4.0/9*sin(6*t + 58.0/13) - 113.0/7)*theta(15*PI -t)*theta(t - 11*PI) + (-2.0/7*sin(3.0/8 - 10*t) - 1.0/6*sin(8.0/11 - 8*t) - 9.0/4*sin(11.0/8 - 4*t) - 3.0/2*sin(7.0/8 - 2*t) + 62.0/21*sin(t + 53.0/12) + 30.0/13*sin(3*t + 7.0/12) + 11.0/12*sin(5*t + 26.0/9) + 2.0/7*sin(6*t + 31.0/11) + 7.0/12*sin(7*t + 11.0/8) + 3.0/13*sin(9*t + 25.0/24) - 183.0/7)*theta(11*PI -t)*theta(t - 7*PI) + (-1.0/5*sin(17.0/12 - 6*t) - 11.0/16*sin(1.0/5 - 4*t) - 11.0/6*sin(11.0/12 - 2*t) + 84.0/13*sin(t + 11.0/8) + 2.0/3*sin(3*t + 11.0/8) + 2.0/3*sin(5*t + 109.0/54) - 6)*theta(7*PI -t)*theta(t - 3*PI) + (-3.0/4*sin(17.0/14 - 5*t) - 15.0/29*sin(9.0/19 - 4*t) - 37.0/19*sin(6.0/7 - 2*t) + 40.0/9*sin(t + 16.0/5) + 23.0/17*sin(3*t + 59.0/16) + 1.0/6*sin(6*t + 55.0/13) - 243.0/14)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
